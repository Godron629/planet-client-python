{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Planet SDK for Python Planet Software Development Kit (SDK) for Python. Quick Start The Planet SDK for Python allows Python developers to write software that makes use of the following Planet APIs: orders data (not implemented) analytics (not implemented) basemaps (referred to in the client as mosaics ) (not implemented) The client modules within the Python library are asynchronous, which greatly speeds up many interactions with Planet's APIs. Support for asynchronous development is native to Python 3.6+ via the asyncio module . A great resource for getting started with asynchronous programming in Python is https://project-awesome.org/timofurrer/awesome-asyncio. The Writings and Talks sections are particularly helpful in getting oriented. Let's start with creating an order with the Orders API: >>> import asyncio >>> import os >>> import planet >>> >>> API_KEY = os . getenv ( 'PL_API_KEY' ) >>> >>> image_ids = [ '3949357_1454705_2020-12-01_241c' ] >>> order_details = planet . OrderDetails ( ... 'test_order' , ... [ planet . Product ( image_ids , 'analytic' , 'psorthotile' )] ... ) >>> >>> async def create_order ( order_details ): ... async with planet . Session ( auth = ( API_KEY , '' )) as ps : ... client = planet . OrdersClient ( ps ) ... return await client . create_order ( order_details ) >>> >>> oid = asyncio . run ( create_order ( order_details )) Not into async? No problem. Just wrap the library and async operations together and call from your synchronous code. >>> def sync_create_order ( order_details ): ... return asyncio . run ( create_order ( order_details )) >>> >>> oid = sync_create_order ( order_details ) When using asyncio.run to develop synchronous code with the async library, keep in mind this excerpt from the asyncio.run documentation: \" This function always creates a new event loop and closes it at the end. It should be used as a main entry point for asyncio programs, and should ideally only be called once. \" Do you have a use case where native synchronous support is essential? If so, please contribute to this issue . Installation Install with pip : $ pip install planet The --user flag is highly recommended for those new to pip. The Planet SDK for Python requires Python 3.7+. Authentication Planet's APIs require an account for use. Sign up here . Development To contribute or develop with this library, see CONTRIBUTING","title":"Introduction"},{"location":"#planet-sdk-for-python","text":"Planet Software Development Kit (SDK) for Python.","title":"Planet SDK for Python"},{"location":"#quick-start","text":"The Planet SDK for Python allows Python developers to write software that makes use of the following Planet APIs: orders data (not implemented) analytics (not implemented) basemaps (referred to in the client as mosaics ) (not implemented) The client modules within the Python library are asynchronous, which greatly speeds up many interactions with Planet's APIs. Support for asynchronous development is native to Python 3.6+ via the asyncio module . A great resource for getting started with asynchronous programming in Python is https://project-awesome.org/timofurrer/awesome-asyncio. The Writings and Talks sections are particularly helpful in getting oriented. Let's start with creating an order with the Orders API: >>> import asyncio >>> import os >>> import planet >>> >>> API_KEY = os . getenv ( 'PL_API_KEY' ) >>> >>> image_ids = [ '3949357_1454705_2020-12-01_241c' ] >>> order_details = planet . OrderDetails ( ... 'test_order' , ... [ planet . Product ( image_ids , 'analytic' , 'psorthotile' )] ... ) >>> >>> async def create_order ( order_details ): ... async with planet . Session ( auth = ( API_KEY , '' )) as ps : ... client = planet . OrdersClient ( ps ) ... return await client . create_order ( order_details ) >>> >>> oid = asyncio . run ( create_order ( order_details )) Not into async? No problem. Just wrap the library and async operations together and call from your synchronous code. >>> def sync_create_order ( order_details ): ... return asyncio . run ( create_order ( order_details )) >>> >>> oid = sync_create_order ( order_details ) When using asyncio.run to develop synchronous code with the async library, keep in mind this excerpt from the asyncio.run documentation: \" This function always creates a new event loop and closes it at the end. It should be used as a main entry point for asyncio programs, and should ideally only be called once. \" Do you have a use case where native synchronous support is essential? If so, please contribute to this issue .","title":"Quick Start"},{"location":"#installation","text":"Install with pip : $ pip install planet The --user flag is highly recommended for those new to pip. The Planet SDK for Python requires Python 3.7+.","title":"Installation"},{"location":"#authentication","text":"Planet's APIs require an account for use. Sign up here .","title":"Authentication"},{"location":"#development","text":"To contribute or develop with this library, see CONTRIBUTING","title":"Development"},{"location":"api/","text":"API Reference Session Context manager for asynchronous communication with the Planet service. Examples: >>> import asyncio >>> from planet import Session >>> >>> async def main (): ... auth = ( 'example_api_key' , '' ) ... async with Session ( auth = auth ) as sess : ... # communicate with services here ... pass ... >>> asyncio . run ( main ()) __init__ ( self , auth = None ) special Initialize a Session. Authentication for Planet servers is given as ('<api key>', '') . Parameters: Name Type Description Default auth Union[httpx.Auth, tuple] Planet server authentication. None Source code in planet/api/http.py def __init__ ( self , auth : typing . Union [ httpx . Auth , tuple ] = None ): \"\"\"Initialize a Session. Authentication for Planet servers is given as `('<api key>', '')`. Parameters: auth: Planet server authentication. \"\"\" self . _client = httpx . AsyncClient ( auth = auth ) self . _client . headers . update ({ 'User-Agent' : self . _get_user_agent ()}) self . _client . event_hooks [ 'request' ] = [ self . _log_request ] self . _client . event_hooks [ 'response' ] = [ self . _log_response , self . _raise_for_status ] self . retry_wait_time = RETRY_WAIT_TIME self . retry_count = RETRY_COUNT request ( self , request , stream = False ) async Submit a request with retry. Parameters: Name Type Description Default request models.Request Request to submit. required stream bool Get the body as a stream. False Returns: Type Description models.Response Response. Source code in planet/api/http.py async def request ( self , request : models . Request , stream : bool = False ) -> models . Response : '''Submit a request with retry. Parameters: request: Request to submit. stream: Get the body as a stream. Returns: Response. ''' # TODO: retry will be provided in httpx v1 [1] with usage [2] # 1. https://github.com/encode/httpcore/pull/221 # 2. https://github.com/encode/httpx/blob/ # 89fb0cbc69ea07b123dd7b36dc1ed9151c5d398f/docs/async.md#explicit-transport-instances # noqa # TODO: if throttling is necessary, check out [1] once v1 # 1. https://github.com/encode/httpx/issues/984 return await self . _retry ( self . _request , request , stream = stream ) stream ( self , request ) Submit a request and get the response as a stream context manager. Parameters: Name Type Description Default request models.Request Request to submit required Returns: Type Description Stream Context manager providing the body as a stream. Source code in planet/api/http.py def stream ( self , request : models . Request ) -> Stream : '''Submit a request and get the response as a stream context manager. Parameters: request: Request to submit Returns: Context manager providing the body as a stream. ''' return Stream ( session = self , request = request ) OrdersClient High-level asynchronous access to Planet's orders API. Examples: >>> import asyncio >>> from planet import Session , OrdersClient >>> >>> async def main (): ... auth = ( 'example_api_key' , '' ) ... async with Session ( auth = auth ) as sess : ... cl = OrdersClient ( sess ) ... # use client here ... >>> asyncio . run ( main ()) __init__ ( self , session , base_url = 'https://api.planet.com/compute/ops/' ) special Parameters: Name Type Description Default session Session Open session connected to server. required base_url str The base URL to use. Defaults to production orders API base url. 'https://api.planet.com/compute/ops/' Source code in planet/api/orders.py def __init__ ( self , session : Session , base_url : str = BASE_URL ): \"\"\" Parameters: session: Open session connected to server. base_url: The base URL to use. Defaults to production orders API base url. \"\"\" self . _session = session self . _base_url = base_url if not self . _base_url . endswith ( '/' ): self . _base_url += '/' aggregated_order_stats ( self ) async Get aggregated counts of active orders. Returns: Type Description dict Aggregated order counts Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def aggregated_order_stats ( self ) -> dict : '''Get aggregated counts of active orders. Returns: Aggregated order counts Raises: planet.api.exceptions.APIException: On API error. ''' url = self . _stats_url () req = self . _request ( url , method = 'GET' ) resp = await self . _do_request ( req ) return resp . json () cancel_order ( self , order_id ) async Cancel a queued order. Note: According to the API docs, cancel order should return the cancelled order details. But testing reveals that an empty response is returned upon success. Parameters: Name Type Description Default order_id str The ID of the order required Returns: Type Description Response Empty response Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def cancel_order ( self , order_id : str ) -> Response : '''Cancel a queued order. **Note:** According to the API docs, cancel order should return the cancelled order details. But testing reveals that an empty response is returned upon success. Parameters: order_id: The ID of the order Returns: Empty response Raises: planet.api.exceptions.APIException: On API error. ''' url = self . _order_url ( order_id ) req = self . _request ( url , method = 'PUT' ) await self . _do_request ( req ) cancel_orders ( self , order_ids = None ) async Cancel queued orders in bulk. Parameters: Name Type Description Default order_ids List[str] The IDs of the orders. If empty or None, all orders in a pre-running state will be cancelled. None Returns: Type Description dict Results of the bulk cancel request Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def cancel_orders ( self , order_ids : typing . List [ str ] = None ) -> dict : '''Cancel queued orders in bulk. Parameters: order_ids: The IDs of the orders. If empty or None, all orders in a pre-running state will be cancelled. Returns: Results of the bulk cancel request Raises: planet.api.exceptions.APIException: On API error. ''' url = self . _bulk_url () + 'cancel' cancel_body = {} if order_ids : cancel_body [ 'order_ids' ] = order_ids req = self . _request ( url , method = 'POST' , json = cancel_body ) resp = await self . _do_request ( req ) return resp . json () create_order ( self , order_details ) async Create an order request. Examples: >>> import asyncio >>> from planet import Session , OrdersClient >>> from planet.api.order_details import OrderDetails , Product >>> >>> async def main (): ... auth = ( 'example_api_key' , '' ) ... image_ids = [ '3949357_1454705_2020-12-01_241c' ] ... order_detail = OrderDetails ( ... 'test_order' , ... [ Product ( image_ids , 'analytic' , 'psorthotile' )] ... ) ... async with Session ( auth = auth ) as sess : ... cl = OrdersClient ( sess ) ... order_id = await cl . create_order ( order_detail ) ... >>> asyncio . run ( main ()) Parameters: Name Type Description Default order_details Union[dict, planet.api.order_details.OrderDetails] order request details required Returns: Type Description str The ID of the order Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def create_order ( self , order_details : typing . Union [ dict , OrderDetails ] ) -> str : '''Create an order request. Example: ```python >>> import asyncio >>> from planet import Session, OrdersClient >>> from planet.api.order_details import OrderDetails, Product >>> >>> async def main(): ... auth = ('example_api_key', '') ... image_ids = ['3949357_1454705_2020-12-01_241c'] ... order_detail = OrderDetails( ... 'test_order', ... [Product(image_ids, 'analytic', 'psorthotile')] ... ) ... async with Session(auth=auth) as sess: ... cl = OrdersClient(sess) ... order_id = await cl.create_order(order_detail) ... >>> asyncio.run(main()) ``` Parameters: order_details: order request details Returns: The ID of the order Raises: planet.api.exceptions.APIException: On API error. ''' if not isinstance ( order_details , OrderDetails ): order_details = OrderDetails . from_dict ( order_details ) data = json . dumps ( order_details . to_dict ()) url = self . _orders_url () req = self . _request ( url , method = 'POST' , data = data ) resp = await self . _do_request ( req ) order = Order ( resp . json ()) return order . id download_asset ( self , location , filename = None , directory = None , overwrite = True , progress_bar = True ) async Download ordered asset. Parameters: Name Type Description Default location str Download location url including download token. required filename str Custom name to assign to downloaded file. None directory str Write to given directory instead of current directory. None overwrite bool Overwrite any existing files. True progress_bar bool Show progress bar during download. True Returns: Type Description str Path to downloaded file. Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def download_asset ( self , location : str , filename : str = None , directory : str = None , overwrite : bool = True , progress_bar : bool = True ) -> str : \"\"\"Download ordered asset. Parameters: location: Download location url including download token. filename: Custom name to assign to downloaded file. directory: Write to given directory instead of current directory. overwrite: Overwrite any existing files. progress_bar: Show progress bar during download. Returns: Path to downloaded file. Raises: planet.api.exceptions.APIException: On API error. \"\"\" req = self . _request ( location , method = 'GET' ) async with self . _session . stream ( req ) as resp : body = StreamingBody ( resp ) dl_path = os . path . join ( directory or '.' , filename or body . name ) await body . write ( dl_path , overwrite = overwrite , progress_bar = progress_bar ) return dl_path download_order ( self , order_id , directory = None , overwrite = True , progress_bar = False ) async Download all assets in an order. Parameters: Name Type Description Default order_id str The ID of the order required directory str Write to given directory instead of current directory. None overwrite bool Overwrite any existing files. True progress_bar bool Show progress bar during download. False Returns: Type Description List[str] Paths to downloaded files. Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def download_order ( self , order_id : str , directory : str = None , overwrite : bool = True , progress_bar : bool = False ) -> typing . List [ str ]: \"\"\"Download all assets in an order. Parameters: order_id: The ID of the order directory: Write to given directory instead of current directory. overwrite: Overwrite any existing files. progress_bar: Show progress bar during download. Returns: Paths to downloaded files. Raises: planet.api.exceptions.APIException: On API error. \"\"\" order = await self . get_order ( order_id ) locations = order . locations LOGGER . info ( f 'downloading { len ( locations ) } assets from order { order_id } ' ) filenames = [ await self . download_asset ( location , directory = directory , overwrite = overwrite , progress_bar = progress_bar ) for location in locations ] return filenames get_order ( self , order_id ) async Get order details by Order ID. Parameters: Name Type Description Default order_id str The ID of the order required Returns: Type Description Order Order information Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def get_order ( self , order_id : str ) -> Order : '''Get order details by Order ID. Parameters: order_id: The ID of the order Returns: Order information Raises: planet.api.exceptions.APIException: On API error. ''' url = self . _order_url ( order_id ) req = self . _request ( url , method = 'GET' ) resp = await self . _do_request ( req ) order = Order ( resp . json ()) return order list_orders ( self , state = None , limit = None ) async Get all order requests. Parameters: Name Type Description Default state str Filter orders to given state. None limit int Limit orders to given limit. None Returns: Type Description List[planet.api.models.Order] User orders that match the query Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def list_orders ( self , state : str = None , limit : int = None ) -> typing . List [ Order ]: \"\"\"Get all order requests. Parameters: state: Filter orders to given state. limit: Limit orders to given limit. Returns: User orders that match the query Raises: planet.api.exceptions.APIException: On API error. \"\"\" url = self . _orders_url () if state : self . _check_state ( state ) params = { \"state\" : state } else : params = None return await self . _get_orders ( url , params = params , limit = limit ) poll ( self , order_id , state = None , wait = 10 , verbose = False ) async Poll for order status until order reaches desired state. Parameters: Name Type Description Default order_id str The ID of the order required state str State to poll until. If multiple, use list. Defaults to any completed state. None wait int Time (in seconds) between polls. 10 verbose bool Print current state at each poll False Returns Completed state of the order Exceptions: Type Description planet.api.exceptions.APIException On API error. OrdersClientException If state is not supported. Source code in planet/api/orders.py async def poll ( self , order_id : str , state : str = None , wait : int = 10 , verbose : bool = False ) -> str : \"\"\"Poll for order status until order reaches desired state. Parameters: order_id: The ID of the order state: State to poll until. If multiple, use list. Defaults to any completed state. wait: Time (in seconds) between polls. verbose: Print current state at each poll Returns Completed state of the order Raises: planet.api.exceptions.APIException: On API error. OrdersClientException: If state is not supported. \"\"\" completed = False if state : if state not in ORDERS_STATES : raise OrdersClientException ( f ' { state } should be one of' f ' { ORDERS_STATES } ' ) states = [ state ] else : states = ORDERS_STATES_COMPLETE while not completed : t = time . time () order = await self . get_order ( order_id ) state = order . state msg = f 'order { order_id } state: { state } ' LOGGER . info ( msg ) if verbose : print ( msg ) completed = state in states if not completed : sleep_time = max ( wait - ( time . time () - t ), 0 ) LOGGER . info ( f 'sleeping { sleep_time } s' ) await asyncio . sleep ( sleep_time ) return state order_details planet.api.order_details.OrderDetails Validating and preparing order details for submission. Can be built up from order detail parts: >>> from planet.api.order_details import OrderDetails , Product >>> >>> image_ids = [ '3949357_1454705_2020-12-01_241c' ] >>> order_detail = OrderDetails ( ... 'test_order' , ... [ Product ( image_ids , 'analytic' , 'psorthotile' )] ... ) ... or from a dict describing the order detail: >>> order_detail_json = { ... 'name' : 'test_order' , ... 'products' : [{ 'item_ids' : [ '3949357_1454705_2020-12-01_241c' ], ... 'item_type' : 'PSOrthoTile' , ... 'product_bundle' : 'analytic' }], ... } ... >>> order_detail = OrderDetails . from_dict ( order_detail_json ) json : str property readonly Order details as a string representing json. __init__ ( self , name , products , subscription_id = 0 , delivery = None , notifications = None , order_type = None , tools = None ) special Parameters: Name Type Description Default name str Name of the order. required products List[Product] Product(s) from the Data API to order. required subscription_id int Apply this orders against this quota subscription. 0 delivery Delivery Specify custom delivery handling. None notifications Notifications Specify custom notifications handling. None order_type str Accept a partial order, indicated by 'partial'. None tools List[Tool] Tools to apply to the products. Order defines the toolchain order of operatations. None Source code in planet/api/order_details.py def __init__ ( self , name : str , products : List [ Product ], subscription_id : int = 0 , delivery : Delivery = None , notifications : Notifications = None , order_type : str = None , tools : List [ Tool ] = None ): \"\"\" Parameters: name: Name of the order. products: Product(s) from the Data API to order. subscription_id: Apply this orders against this quota subscription. delivery: Specify custom delivery handling. notifications: Specify custom notifications handling. order_type: Accept a partial order, indicated by 'partial'. tools: Tools to apply to the products. Order defines the toolchain order of operatations. \"\"\" self . name = name self . products = products self . subscription_id = subscription_id self . delivery = delivery self . notifications = notifications self . order_type = order_type self . tools = tools if self . order_type is not None : self . order_type = specs . validate_order_type ( order_type ) from_dict ( details ) classmethod Create OrderDetails instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of OrderDetails. required Returns: Type Description OrderDetails OrderDetails instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> OrderDetails : \"\"\"Create OrderDetails instance from Orders API spec representation. Parameters: details: API spec representation of OrderDetails. Returns: OrderDetails instance \"\"\" name = details [ 'name' ] products = [ Product . from_dict ( p ) for p in details [ 'products' ]] subscription_id = details . get ( 'subscription_id' , None ) delivery = details . get ( 'delivery' , None ) if delivery : delivery = Delivery . from_dict ( delivery ) notifications = details . get ( 'notifications' , None ) if notifications : notifications = Notifications . from_dict ( notifications ) order_type = details . get ( 'order_type' , None ) tools = [ Tool . from_dict ( t ) for t in details . get ( 'tools' , [])] return cls ( name , products , subscription_id , delivery , notifications , order_type , tools ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of OrderDetails. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of OrderDetails. \"\"\" details = { 'name' : self . name , 'products' : [ p . to_dict () for p in self . products ] } if self . subscription_id is not None : details [ 'subscription_id' ] = self . subscription_id if self . delivery is not None : details [ 'delivery' ] = self . delivery . to_dict () if self . notifications is not None : details [ 'notifications' ] = self . notifications . to_dict () if self . order_type is not None : details [ 'order_type' ] = self . order_type if self . tools is not None : details [ 'tools' ] = [ t . to_dict () for t in self . tools ] return details planet.api.order_details.Product Product description for an order detail. __init__ ( self , item_ids , product_bundle , item_type , fallback_bundle = None ) special Parameters: Name Type Description Default item_ids List[str] IDs of the catalog items to include in the order. required product_bundle str Set of asset types for the catalog items. required item_type str The class of spacecraft and processing characteristics for the catalog items. required fallback_bundle str In case product_bundle not having all asset types available, which would result in failed delivery, try a fallback bundle None Source code in planet/api/order_details.py def __init__ ( self , item_ids : List [ str ], product_bundle : str , item_type : str , fallback_bundle : str = None ): \"\"\" Parameters: item_ids: IDs of the catalog items to include in the order. product_bundle: Set of asset types for the catalog items. item_type: The class of spacecraft and processing characteristics for the catalog items. fallback_bundle: In case product_bundle not having all asset types available, which would result in failed delivery, try a fallback bundle \"\"\" self . item_ids = item_ids self . product_bundle = specs . validate_bundle ( product_bundle ) if fallback_bundle is not None : self . fallback_bundle = specs . validate_bundle ( fallback_bundle ) else : self . fallback_bundle = None self . item_type = specs . validate_item_type ( item_type , product_bundle ) if fallback_bundle is not None : specs . validate_item_type ( item_type , fallback_bundle ) from_dict ( details ) classmethod Create Product instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of product. required Returns: Type Description Product Product instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> Product : \"\"\"Create Product instance from Orders API spec representation. Parameters: details: API spec representation of product. Returns: Product instance \"\"\" bundles = details [ 'product_bundle' ] . split ( ',' ) product_bundle = bundles [ 0 ] try : fallback_bundle = bundles [ 1 ] except IndexError : fallback_bundle = None return cls ( details [ 'item_ids' ], product_bundle , details [ 'item_type' ], fallback_bundle ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of product. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of product. \"\"\" product_bundle = self . product_bundle if self . fallback_bundle is not None : product_bundle = ',' . join ([ product_bundle , self . fallback_bundle ]) product_dict = { 'item_ids' : self . item_ids , 'item_type' : self . item_type , 'product_bundle' : product_bundle } return product_dict planet.api.order_details.Notifications Notifications description for an order detail. __init__ ( self , email = False , webhook_url = None , webhook_per_order = False ) special Parameters: Name Type Description Default email bool Enable email notifications for an order. False webhook_url str URL for notification when the order is ready. None webhook_per_order bool Request a single webhook call per order instead of one call per each delivered item. False Source code in planet/api/order_details.py def __init__ ( self , email : bool = False , webhook_url : str = None , webhook_per_order : bool = False ): \"\"\" Parameters: email: Enable email notifications for an order. webhook_url: URL for notification when the order is ready. webhook_per_order: Request a single webhook call per order instead of one call per each delivered item. \"\"\" self . email = email self . webhook_url = webhook_url self . webhook_per_order = webhook_per_order from_dict ( details ) classmethod Create Notifications instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of notifications. required Returns: Type Description Notifications Notifications instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> Notifications : \"\"\"Create Notifications instance from Orders API spec representation. Parameters: details: API spec representation of notifications. Returns: Notifications instance \"\"\" return cls ( ** details ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of notifications. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of notifications. \"\"\" details = {} if self . email : details [ 'email' ] = self . email if self . webhook_url is not None : details [ 'webhook_url' ] = self . webhook_url if self . webhook_per_order : details [ 'webhook_per_order' ] = True return details planet.api.order_details.Delivery Manages order detail delivery description. __init__ ( self , archive_type = None , single_archive = False , archive_filename = None ) special Parameters: Name Type Description Default archive_type str Archive order files. Only supports 'zip'. None single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , archive_type : str = None , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" if archive_type : self . archive_type = specs . validate_archive_type ( archive_type ) else : self . archive_type = archive_type self . single_archive = single_archive self . archive_filename = archive_filename from_dict ( details ) classmethod Create Delivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description Delivery Delivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> Delivery : \"\"\"Create Delivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: Delivery instance \"\"\" return cls ( ** details ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of delivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of delivery. \"\"\" details = {} if self . archive_type : details [ 'archive_type' ] = self . archive_type if self . single_archive : details [ 'single_archive' ] = self . single_archive if self . archive_filename : details [ 'archive_filename' ] = self . archive_filename return details planet.api.order_details.AmazonS3Delivery Amazon S3 delivery description for an order detail. __init__ ( self , aws_access_key_id , aws_secret_access_key , bucket , aws_region , path_prefix = None , archive_type = False , single_archive = False , archive_filename = None ) special Parameters: Name Type Description Default aws_access_key_id str S3 account access key. required aws_secret_access_key str S3 account secret key. required bucket str The name of the bucket that will receive the order output. required aws_region str The region where the bucket lives in AWS. required path_prefix str Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. None archive_type str Archive order files. Only supports 'zip'. False single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , aws_access_key_id : str , aws_secret_access_key : str , bucket : str , aws_region : str , path_prefix : str = None , archive_type : str = False , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: aws_access_key_id: S3 account access key. aws_secret_access_key: S3 account secret key. bucket: The name of the bucket that will receive the order output. aws_region: The region where the bucket lives in AWS. path_prefix: Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" self . aws_access_key_id = aws_access_key_id self . aws_secret_access_key = aws_secret_access_key self . aws_region = aws_region self . bucket = bucket self . path_prefix = path_prefix super () . __init__ ( archive_type , single_archive , archive_filename ) from_dict ( details ) classmethod Create AmazonS3Delivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description AmazonS3Delivery AmazonS3Delivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> AmazonS3Delivery : \"\"\"Create AmazonS3Delivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: AmazonS3Delivery instance \"\"\" cloud_details = _get_cloud_details ( details , cls . cloud_key ) return cls ( ** cloud_details ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of AmazonS3Delivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of AmazonS3Delivery. \"\"\" cloud_details = { 'aws_access_key_id' : self . aws_access_key_id , 'aws_secret_access_key' : self . aws_secret_access_key , 'bucket' : self . bucket , 'aws_region' : self . aws_region , } if self . path_prefix : cloud_details [ 'path_prefix' ] = self . path_prefix details = super () . to_dict () details [ self . cloud_key ] = cloud_details return details planet.api.order_details.AzureBlobStorageDelivery Azure Blob Storage delivery description for an order detail. __init__ ( self , account , container , sas_token , storage_endpoint_suffix = None , path_prefix = None , archive_type = False , single_archive = False , archive_filename = None ) special Parameters: Name Type Description Default account str Azure account. required container str ABS container name. required sas_token str Shared-Access Signature token. Token should be specified without a leading '?'. required storage_endpoint_suffix str Deliver order to a sovereign cloud. None path_prefix str Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. None archive_type str Archive order files. Only supports 'zip'. False single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , account : str , container : str , sas_token : str , storage_endpoint_suffix : str = None , path_prefix : str = None , archive_type : str = False , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: account: Azure account. container: ABS container name. sas_token: Shared-Access Signature token. Token should be specified without a leading '?'. storage_endpoint_suffix: Deliver order to a sovereign cloud. path_prefix: Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" self . account = account self . container = container self . sas_token = sas_token self . storage_endpoint_suffix = storage_endpoint_suffix self . path_prefix = path_prefix super () . __init__ ( archive_type , single_archive , archive_filename ) from_dict ( details ) classmethod Create AzureBlobStorageDelivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description AzureBlobStorageDelivery AzureBlobStorageDelivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> AzureBlobStorageDelivery : \"\"\"Create AzureBlobStorageDelivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: AzureBlobStorageDelivery instance \"\"\" cloud_details = _get_cloud_details ( details , cls . cloud_key ) return cls ( ** cloud_details ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of AzureBlobStorageDelivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of AzureBlobStorageDelivery. \"\"\" cloud_details = { 'account' : self . account , 'container' : self . container , 'sas_token' : self . sas_token , } if self . storage_endpoint_suffix : cloud_details [ 'storage_endpoint_suffix' ] = \\ self . storage_endpoint_suffix if self . path_prefix : cloud_details [ 'path_prefix' ] = self . path_prefix details = super () . to_dict () details [ self . cloud_key ] = cloud_details return details planet.api.order_details.GoogleCloudStorageDelivery Google Cloud Storage delivery description for an order detail. __init__ ( self , bucket , credentials , path_prefix = None , archive_type = False , single_archive = False , archive_filename = None ) special Parameters: Name Type Description Default bucket str GCS bucket name. required credentials str JSON-string of service account for bucket. required path_prefix str Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. None archive_type str Archive order files. Only supports 'zip'. False single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , bucket : str , credentials : str , path_prefix : str = None , archive_type : str = False , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: bucket: GCS bucket name. credentials: JSON-string of service account for bucket. path_prefix: Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" self . bucket = bucket self . credentials = credentials self . path_prefix = path_prefix super () . __init__ ( archive_type , single_archive , archive_filename ) from_dict ( details ) classmethod Create GoogleCloudStorageDelivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description GoogleCloudStorageDelivery GoogleCloudStorageDelivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> GoogleCloudStorageDelivery : \"\"\"Create GoogleCloudStorageDelivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: GoogleCloudStorageDelivery instance \"\"\" cloud_details = _get_cloud_details ( details , cls . cloud_key ) return cls ( ** cloud_details ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of GoogleCloudStorageDelivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of GoogleCloudStorageDelivery. \"\"\" cloud_details = { 'bucket' : self . bucket , 'credentials' : self . credentials , } if self . path_prefix : cloud_details [ 'path_prefix' ] = self . path_prefix details = super () . to_dict () details [ self . cloud_key ] = cloud_details return details planet.api.order_details.GoogleEarthEngineDelivery Google Earth Engine delivery description for an order detail. __init__ ( self , project , collection , archive_type = False , single_archive = False , archive_filename = None ) special Parameters: Name Type Description Default project str GEE project name. required collection str GEE Image Collection name. required archive_type str Archive order files. Only supports 'zip'. False single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , project : str , collection : str , archive_type : str = False , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: project: GEE project name. collection: GEE Image Collection name. archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" self . project = project self . collection = collection super () . __init__ ( archive_type , single_archive , archive_filename ) from_dict ( details ) classmethod Create GoogleEarthEngineDelivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description GoogleEarthEngineDelivery GoogleEarthEngineDelivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> GoogleEarthEngineDelivery : \"\"\"Create GoogleEarthEngineDelivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: GoogleEarthEngineDelivery instance \"\"\" cloud_details = _get_cloud_details ( details , cls . cloud_key ) return cls ( ** cloud_details ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of GoogleEarthEngineDelivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of GoogleEarthEngineDelivery. \"\"\" cloud_details = { 'project' : self . project , 'collection' : self . collection , } details = super () . to_dict () details [ self . cloud_key ] = cloud_details return details planet.api.order_details.Tool Tool description for an order detail. See Tools and Toolchains for more information on available tools and tool parameters. __init__ ( self , name , parameters ) special Parameters** name: Tool name. parameters: Tool parameters. Source code in planet/api/order_details.py def __init__ ( self , name : str , parameters : dict ): \"\"\" Parameters** name: Tool name. parameters: Tool parameters. \"\"\" self . name = specs . validate_tool ( name ) self . parameters = parameters from_dict ( details ) classmethod Create Tool instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of Tool. required Returns: Type Description Tool Tool instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> Tool : \"\"\"Create Tool instance from Orders API spec representation. Parameters: details: API spec representation of Tool. Returns: Tool instance \"\"\" if len ( details ) != 1 : raise ToolException ( 'Tool description must have only one item, name: parameters' ) name , parameters = details . popitem () return cls ( name , parameters ) to_dict ( self ) Get Orders API spec representation. Returns: Type Description dict API spec representation of Tool. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of Tool. \"\"\" return { self . name : self . parameters }","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#planet.api.http.Session","text":"Context manager for asynchronous communication with the Planet service. Examples: >>> import asyncio >>> from planet import Session >>> >>> async def main (): ... auth = ( 'example_api_key' , '' ) ... async with Session ( auth = auth ) as sess : ... # communicate with services here ... pass ... >>> asyncio . run ( main ())","title":"Session"},{"location":"api/#planet.api.http.Session.__init__","text":"Initialize a Session. Authentication for Planet servers is given as ('<api key>', '') . Parameters: Name Type Description Default auth Union[httpx.Auth, tuple] Planet server authentication. None Source code in planet/api/http.py def __init__ ( self , auth : typing . Union [ httpx . Auth , tuple ] = None ): \"\"\"Initialize a Session. Authentication for Planet servers is given as `('<api key>', '')`. Parameters: auth: Planet server authentication. \"\"\" self . _client = httpx . AsyncClient ( auth = auth ) self . _client . headers . update ({ 'User-Agent' : self . _get_user_agent ()}) self . _client . event_hooks [ 'request' ] = [ self . _log_request ] self . _client . event_hooks [ 'response' ] = [ self . _log_response , self . _raise_for_status ] self . retry_wait_time = RETRY_WAIT_TIME self . retry_count = RETRY_COUNT","title":"__init__()"},{"location":"api/#planet.api.http.Session.request","text":"Submit a request with retry. Parameters: Name Type Description Default request models.Request Request to submit. required stream bool Get the body as a stream. False Returns: Type Description models.Response Response. Source code in planet/api/http.py async def request ( self , request : models . Request , stream : bool = False ) -> models . Response : '''Submit a request with retry. Parameters: request: Request to submit. stream: Get the body as a stream. Returns: Response. ''' # TODO: retry will be provided in httpx v1 [1] with usage [2] # 1. https://github.com/encode/httpcore/pull/221 # 2. https://github.com/encode/httpx/blob/ # 89fb0cbc69ea07b123dd7b36dc1ed9151c5d398f/docs/async.md#explicit-transport-instances # noqa # TODO: if throttling is necessary, check out [1] once v1 # 1. https://github.com/encode/httpx/issues/984 return await self . _retry ( self . _request , request , stream = stream )","title":"request()"},{"location":"api/#planet.api.http.Session.stream","text":"Submit a request and get the response as a stream context manager. Parameters: Name Type Description Default request models.Request Request to submit required Returns: Type Description Stream Context manager providing the body as a stream. Source code in planet/api/http.py def stream ( self , request : models . Request ) -> Stream : '''Submit a request and get the response as a stream context manager. Parameters: request: Request to submit Returns: Context manager providing the body as a stream. ''' return Stream ( session = self , request = request )","title":"stream()"},{"location":"api/#planet.api.orders.OrdersClient","text":"High-level asynchronous access to Planet's orders API. Examples: >>> import asyncio >>> from planet import Session , OrdersClient >>> >>> async def main (): ... auth = ( 'example_api_key' , '' ) ... async with Session ( auth = auth ) as sess : ... cl = OrdersClient ( sess ) ... # use client here ... >>> asyncio . run ( main ())","title":"OrdersClient"},{"location":"api/#planet.api.orders.OrdersClient.__init__","text":"Parameters: Name Type Description Default session Session Open session connected to server. required base_url str The base URL to use. Defaults to production orders API base url. 'https://api.planet.com/compute/ops/' Source code in planet/api/orders.py def __init__ ( self , session : Session , base_url : str = BASE_URL ): \"\"\" Parameters: session: Open session connected to server. base_url: The base URL to use. Defaults to production orders API base url. \"\"\" self . _session = session self . _base_url = base_url if not self . _base_url . endswith ( '/' ): self . _base_url += '/'","title":"__init__()"},{"location":"api/#planet.api.orders.OrdersClient.aggregated_order_stats","text":"Get aggregated counts of active orders. Returns: Type Description dict Aggregated order counts Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def aggregated_order_stats ( self ) -> dict : '''Get aggregated counts of active orders. Returns: Aggregated order counts Raises: planet.api.exceptions.APIException: On API error. ''' url = self . _stats_url () req = self . _request ( url , method = 'GET' ) resp = await self . _do_request ( req ) return resp . json ()","title":"aggregated_order_stats()"},{"location":"api/#planet.api.orders.OrdersClient.cancel_order","text":"Cancel a queued order. Note: According to the API docs, cancel order should return the cancelled order details. But testing reveals that an empty response is returned upon success. Parameters: Name Type Description Default order_id str The ID of the order required Returns: Type Description Response Empty response Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def cancel_order ( self , order_id : str ) -> Response : '''Cancel a queued order. **Note:** According to the API docs, cancel order should return the cancelled order details. But testing reveals that an empty response is returned upon success. Parameters: order_id: The ID of the order Returns: Empty response Raises: planet.api.exceptions.APIException: On API error. ''' url = self . _order_url ( order_id ) req = self . _request ( url , method = 'PUT' ) await self . _do_request ( req )","title":"cancel_order()"},{"location":"api/#planet.api.orders.OrdersClient.cancel_orders","text":"Cancel queued orders in bulk. Parameters: Name Type Description Default order_ids List[str] The IDs of the orders. If empty or None, all orders in a pre-running state will be cancelled. None Returns: Type Description dict Results of the bulk cancel request Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def cancel_orders ( self , order_ids : typing . List [ str ] = None ) -> dict : '''Cancel queued orders in bulk. Parameters: order_ids: The IDs of the orders. If empty or None, all orders in a pre-running state will be cancelled. Returns: Results of the bulk cancel request Raises: planet.api.exceptions.APIException: On API error. ''' url = self . _bulk_url () + 'cancel' cancel_body = {} if order_ids : cancel_body [ 'order_ids' ] = order_ids req = self . _request ( url , method = 'POST' , json = cancel_body ) resp = await self . _do_request ( req ) return resp . json ()","title":"cancel_orders()"},{"location":"api/#planet.api.orders.OrdersClient.create_order","text":"Create an order request. Examples: >>> import asyncio >>> from planet import Session , OrdersClient >>> from planet.api.order_details import OrderDetails , Product >>> >>> async def main (): ... auth = ( 'example_api_key' , '' ) ... image_ids = [ '3949357_1454705_2020-12-01_241c' ] ... order_detail = OrderDetails ( ... 'test_order' , ... [ Product ( image_ids , 'analytic' , 'psorthotile' )] ... ) ... async with Session ( auth = auth ) as sess : ... cl = OrdersClient ( sess ) ... order_id = await cl . create_order ( order_detail ) ... >>> asyncio . run ( main ()) Parameters: Name Type Description Default order_details Union[dict, planet.api.order_details.OrderDetails] order request details required Returns: Type Description str The ID of the order Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def create_order ( self , order_details : typing . Union [ dict , OrderDetails ] ) -> str : '''Create an order request. Example: ```python >>> import asyncio >>> from planet import Session, OrdersClient >>> from planet.api.order_details import OrderDetails, Product >>> >>> async def main(): ... auth = ('example_api_key', '') ... image_ids = ['3949357_1454705_2020-12-01_241c'] ... order_detail = OrderDetails( ... 'test_order', ... [Product(image_ids, 'analytic', 'psorthotile')] ... ) ... async with Session(auth=auth) as sess: ... cl = OrdersClient(sess) ... order_id = await cl.create_order(order_detail) ... >>> asyncio.run(main()) ``` Parameters: order_details: order request details Returns: The ID of the order Raises: planet.api.exceptions.APIException: On API error. ''' if not isinstance ( order_details , OrderDetails ): order_details = OrderDetails . from_dict ( order_details ) data = json . dumps ( order_details . to_dict ()) url = self . _orders_url () req = self . _request ( url , method = 'POST' , data = data ) resp = await self . _do_request ( req ) order = Order ( resp . json ()) return order . id","title":"create_order()"},{"location":"api/#planet.api.orders.OrdersClient.download_asset","text":"Download ordered asset. Parameters: Name Type Description Default location str Download location url including download token. required filename str Custom name to assign to downloaded file. None directory str Write to given directory instead of current directory. None overwrite bool Overwrite any existing files. True progress_bar bool Show progress bar during download. True Returns: Type Description str Path to downloaded file. Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def download_asset ( self , location : str , filename : str = None , directory : str = None , overwrite : bool = True , progress_bar : bool = True ) -> str : \"\"\"Download ordered asset. Parameters: location: Download location url including download token. filename: Custom name to assign to downloaded file. directory: Write to given directory instead of current directory. overwrite: Overwrite any existing files. progress_bar: Show progress bar during download. Returns: Path to downloaded file. Raises: planet.api.exceptions.APIException: On API error. \"\"\" req = self . _request ( location , method = 'GET' ) async with self . _session . stream ( req ) as resp : body = StreamingBody ( resp ) dl_path = os . path . join ( directory or '.' , filename or body . name ) await body . write ( dl_path , overwrite = overwrite , progress_bar = progress_bar ) return dl_path","title":"download_asset()"},{"location":"api/#planet.api.orders.OrdersClient.download_order","text":"Download all assets in an order. Parameters: Name Type Description Default order_id str The ID of the order required directory str Write to given directory instead of current directory. None overwrite bool Overwrite any existing files. True progress_bar bool Show progress bar during download. False Returns: Type Description List[str] Paths to downloaded files. Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def download_order ( self , order_id : str , directory : str = None , overwrite : bool = True , progress_bar : bool = False ) -> typing . List [ str ]: \"\"\"Download all assets in an order. Parameters: order_id: The ID of the order directory: Write to given directory instead of current directory. overwrite: Overwrite any existing files. progress_bar: Show progress bar during download. Returns: Paths to downloaded files. Raises: planet.api.exceptions.APIException: On API error. \"\"\" order = await self . get_order ( order_id ) locations = order . locations LOGGER . info ( f 'downloading { len ( locations ) } assets from order { order_id } ' ) filenames = [ await self . download_asset ( location , directory = directory , overwrite = overwrite , progress_bar = progress_bar ) for location in locations ] return filenames","title":"download_order()"},{"location":"api/#planet.api.orders.OrdersClient.get_order","text":"Get order details by Order ID. Parameters: Name Type Description Default order_id str The ID of the order required Returns: Type Description Order Order information Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def get_order ( self , order_id : str ) -> Order : '''Get order details by Order ID. Parameters: order_id: The ID of the order Returns: Order information Raises: planet.api.exceptions.APIException: On API error. ''' url = self . _order_url ( order_id ) req = self . _request ( url , method = 'GET' ) resp = await self . _do_request ( req ) order = Order ( resp . json ()) return order","title":"get_order()"},{"location":"api/#planet.api.orders.OrdersClient.list_orders","text":"Get all order requests. Parameters: Name Type Description Default state str Filter orders to given state. None limit int Limit orders to given limit. None Returns: Type Description List[planet.api.models.Order] User orders that match the query Exceptions: Type Description planet.api.exceptions.APIException On API error. Source code in planet/api/orders.py async def list_orders ( self , state : str = None , limit : int = None ) -> typing . List [ Order ]: \"\"\"Get all order requests. Parameters: state: Filter orders to given state. limit: Limit orders to given limit. Returns: User orders that match the query Raises: planet.api.exceptions.APIException: On API error. \"\"\" url = self . _orders_url () if state : self . _check_state ( state ) params = { \"state\" : state } else : params = None return await self . _get_orders ( url , params = params , limit = limit )","title":"list_orders()"},{"location":"api/#planet.api.orders.OrdersClient.poll","text":"Poll for order status until order reaches desired state. Parameters: Name Type Description Default order_id str The ID of the order required state str State to poll until. If multiple, use list. Defaults to any completed state. None wait int Time (in seconds) between polls. 10 verbose bool Print current state at each poll False Returns Completed state of the order Exceptions: Type Description planet.api.exceptions.APIException On API error. OrdersClientException If state is not supported. Source code in planet/api/orders.py async def poll ( self , order_id : str , state : str = None , wait : int = 10 , verbose : bool = False ) -> str : \"\"\"Poll for order status until order reaches desired state. Parameters: order_id: The ID of the order state: State to poll until. If multiple, use list. Defaults to any completed state. wait: Time (in seconds) between polls. verbose: Print current state at each poll Returns Completed state of the order Raises: planet.api.exceptions.APIException: On API error. OrdersClientException: If state is not supported. \"\"\" completed = False if state : if state not in ORDERS_STATES : raise OrdersClientException ( f ' { state } should be one of' f ' { ORDERS_STATES } ' ) states = [ state ] else : states = ORDERS_STATES_COMPLETE while not completed : t = time . time () order = await self . get_order ( order_id ) state = order . state msg = f 'order { order_id } state: { state } ' LOGGER . info ( msg ) if verbose : print ( msg ) completed = state in states if not completed : sleep_time = max ( wait - ( time . time () - t ), 0 ) LOGGER . info ( f 'sleeping { sleep_time } s' ) await asyncio . sleep ( sleep_time ) return state","title":"poll()"},{"location":"api/#order_details","text":"","title":"order_details"},{"location":"api/#planet.api.order_details.OrderDetails","text":"Validating and preparing order details for submission. Can be built up from order detail parts: >>> from planet.api.order_details import OrderDetails , Product >>> >>> image_ids = [ '3949357_1454705_2020-12-01_241c' ] >>> order_detail = OrderDetails ( ... 'test_order' , ... [ Product ( image_ids , 'analytic' , 'psorthotile' )] ... ) ... or from a dict describing the order detail: >>> order_detail_json = { ... 'name' : 'test_order' , ... 'products' : [{ 'item_ids' : [ '3949357_1454705_2020-12-01_241c' ], ... 'item_type' : 'PSOrthoTile' , ... 'product_bundle' : 'analytic' }], ... } ... >>> order_detail = OrderDetails . from_dict ( order_detail_json )","title":"OrderDetails"},{"location":"api/#planet.api.order_details.OrderDetails.json","text":"Order details as a string representing json.","title":"json"},{"location":"api/#planet.api.order_details.OrderDetails.__init__","text":"Parameters: Name Type Description Default name str Name of the order. required products List[Product] Product(s) from the Data API to order. required subscription_id int Apply this orders against this quota subscription. 0 delivery Delivery Specify custom delivery handling. None notifications Notifications Specify custom notifications handling. None order_type str Accept a partial order, indicated by 'partial'. None tools List[Tool] Tools to apply to the products. Order defines the toolchain order of operatations. None Source code in planet/api/order_details.py def __init__ ( self , name : str , products : List [ Product ], subscription_id : int = 0 , delivery : Delivery = None , notifications : Notifications = None , order_type : str = None , tools : List [ Tool ] = None ): \"\"\" Parameters: name: Name of the order. products: Product(s) from the Data API to order. subscription_id: Apply this orders against this quota subscription. delivery: Specify custom delivery handling. notifications: Specify custom notifications handling. order_type: Accept a partial order, indicated by 'partial'. tools: Tools to apply to the products. Order defines the toolchain order of operatations. \"\"\" self . name = name self . products = products self . subscription_id = subscription_id self . delivery = delivery self . notifications = notifications self . order_type = order_type self . tools = tools if self . order_type is not None : self . order_type = specs . validate_order_type ( order_type )","title":"__init__()"},{"location":"api/#planet.api.order_details.OrderDetails.from_dict","text":"Create OrderDetails instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of OrderDetails. required Returns: Type Description OrderDetails OrderDetails instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> OrderDetails : \"\"\"Create OrderDetails instance from Orders API spec representation. Parameters: details: API spec representation of OrderDetails. Returns: OrderDetails instance \"\"\" name = details [ 'name' ] products = [ Product . from_dict ( p ) for p in details [ 'products' ]] subscription_id = details . get ( 'subscription_id' , None ) delivery = details . get ( 'delivery' , None ) if delivery : delivery = Delivery . from_dict ( delivery ) notifications = details . get ( 'notifications' , None ) if notifications : notifications = Notifications . from_dict ( notifications ) order_type = details . get ( 'order_type' , None ) tools = [ Tool . from_dict ( t ) for t in details . get ( 'tools' , [])] return cls ( name , products , subscription_id , delivery , notifications , order_type , tools )","title":"from_dict()"},{"location":"api/#planet.api.order_details.OrderDetails.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of OrderDetails. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of OrderDetails. \"\"\" details = { 'name' : self . name , 'products' : [ p . to_dict () for p in self . products ] } if self . subscription_id is not None : details [ 'subscription_id' ] = self . subscription_id if self . delivery is not None : details [ 'delivery' ] = self . delivery . to_dict () if self . notifications is not None : details [ 'notifications' ] = self . notifications . to_dict () if self . order_type is not None : details [ 'order_type' ] = self . order_type if self . tools is not None : details [ 'tools' ] = [ t . to_dict () for t in self . tools ] return details","title":"to_dict()"},{"location":"api/#planet.api.order_details.Product","text":"Product description for an order detail.","title":"Product"},{"location":"api/#planet.api.order_details.Product.__init__","text":"Parameters: Name Type Description Default item_ids List[str] IDs of the catalog items to include in the order. required product_bundle str Set of asset types for the catalog items. required item_type str The class of spacecraft and processing characteristics for the catalog items. required fallback_bundle str In case product_bundle not having all asset types available, which would result in failed delivery, try a fallback bundle None Source code in planet/api/order_details.py def __init__ ( self , item_ids : List [ str ], product_bundle : str , item_type : str , fallback_bundle : str = None ): \"\"\" Parameters: item_ids: IDs of the catalog items to include in the order. product_bundle: Set of asset types for the catalog items. item_type: The class of spacecraft and processing characteristics for the catalog items. fallback_bundle: In case product_bundle not having all asset types available, which would result in failed delivery, try a fallback bundle \"\"\" self . item_ids = item_ids self . product_bundle = specs . validate_bundle ( product_bundle ) if fallback_bundle is not None : self . fallback_bundle = specs . validate_bundle ( fallback_bundle ) else : self . fallback_bundle = None self . item_type = specs . validate_item_type ( item_type , product_bundle ) if fallback_bundle is not None : specs . validate_item_type ( item_type , fallback_bundle )","title":"__init__()"},{"location":"api/#planet.api.order_details.Product.from_dict","text":"Create Product instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of product. required Returns: Type Description Product Product instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> Product : \"\"\"Create Product instance from Orders API spec representation. Parameters: details: API spec representation of product. Returns: Product instance \"\"\" bundles = details [ 'product_bundle' ] . split ( ',' ) product_bundle = bundles [ 0 ] try : fallback_bundle = bundles [ 1 ] except IndexError : fallback_bundle = None return cls ( details [ 'item_ids' ], product_bundle , details [ 'item_type' ], fallback_bundle )","title":"from_dict()"},{"location":"api/#planet.api.order_details.Product.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of product. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of product. \"\"\" product_bundle = self . product_bundle if self . fallback_bundle is not None : product_bundle = ',' . join ([ product_bundle , self . fallback_bundle ]) product_dict = { 'item_ids' : self . item_ids , 'item_type' : self . item_type , 'product_bundle' : product_bundle } return product_dict","title":"to_dict()"},{"location":"api/#planet.api.order_details.Notifications","text":"Notifications description for an order detail.","title":"Notifications"},{"location":"api/#planet.api.order_details.Notifications.__init__","text":"Parameters: Name Type Description Default email bool Enable email notifications for an order. False webhook_url str URL for notification when the order is ready. None webhook_per_order bool Request a single webhook call per order instead of one call per each delivered item. False Source code in planet/api/order_details.py def __init__ ( self , email : bool = False , webhook_url : str = None , webhook_per_order : bool = False ): \"\"\" Parameters: email: Enable email notifications for an order. webhook_url: URL for notification when the order is ready. webhook_per_order: Request a single webhook call per order instead of one call per each delivered item. \"\"\" self . email = email self . webhook_url = webhook_url self . webhook_per_order = webhook_per_order","title":"__init__()"},{"location":"api/#planet.api.order_details.Notifications.from_dict","text":"Create Notifications instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of notifications. required Returns: Type Description Notifications Notifications instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> Notifications : \"\"\"Create Notifications instance from Orders API spec representation. Parameters: details: API spec representation of notifications. Returns: Notifications instance \"\"\" return cls ( ** details )","title":"from_dict()"},{"location":"api/#planet.api.order_details.Notifications.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of notifications. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of notifications. \"\"\" details = {} if self . email : details [ 'email' ] = self . email if self . webhook_url is not None : details [ 'webhook_url' ] = self . webhook_url if self . webhook_per_order : details [ 'webhook_per_order' ] = True return details","title":"to_dict()"},{"location":"api/#planet.api.order_details.Delivery","text":"Manages order detail delivery description.","title":"Delivery"},{"location":"api/#planet.api.order_details.Delivery.__init__","text":"Parameters: Name Type Description Default archive_type str Archive order files. Only supports 'zip'. None single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , archive_type : str = None , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" if archive_type : self . archive_type = specs . validate_archive_type ( archive_type ) else : self . archive_type = archive_type self . single_archive = single_archive self . archive_filename = archive_filename","title":"__init__()"},{"location":"api/#planet.api.order_details.Delivery.from_dict","text":"Create Delivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description Delivery Delivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> Delivery : \"\"\"Create Delivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: Delivery instance \"\"\" return cls ( ** details )","title":"from_dict()"},{"location":"api/#planet.api.order_details.Delivery.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of delivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of delivery. \"\"\" details = {} if self . archive_type : details [ 'archive_type' ] = self . archive_type if self . single_archive : details [ 'single_archive' ] = self . single_archive if self . archive_filename : details [ 'archive_filename' ] = self . archive_filename return details","title":"to_dict()"},{"location":"api/#planet.api.order_details.AmazonS3Delivery","text":"Amazon S3 delivery description for an order detail.","title":"AmazonS3Delivery"},{"location":"api/#planet.api.order_details.AmazonS3Delivery.__init__","text":"Parameters: Name Type Description Default aws_access_key_id str S3 account access key. required aws_secret_access_key str S3 account secret key. required bucket str The name of the bucket that will receive the order output. required aws_region str The region where the bucket lives in AWS. required path_prefix str Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. None archive_type str Archive order files. Only supports 'zip'. False single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , aws_access_key_id : str , aws_secret_access_key : str , bucket : str , aws_region : str , path_prefix : str = None , archive_type : str = False , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: aws_access_key_id: S3 account access key. aws_secret_access_key: S3 account secret key. bucket: The name of the bucket that will receive the order output. aws_region: The region where the bucket lives in AWS. path_prefix: Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" self . aws_access_key_id = aws_access_key_id self . aws_secret_access_key = aws_secret_access_key self . aws_region = aws_region self . bucket = bucket self . path_prefix = path_prefix super () . __init__ ( archive_type , single_archive , archive_filename )","title":"__init__()"},{"location":"api/#planet.api.order_details.AmazonS3Delivery.from_dict","text":"Create AmazonS3Delivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description AmazonS3Delivery AmazonS3Delivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> AmazonS3Delivery : \"\"\"Create AmazonS3Delivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: AmazonS3Delivery instance \"\"\" cloud_details = _get_cloud_details ( details , cls . cloud_key ) return cls ( ** cloud_details )","title":"from_dict()"},{"location":"api/#planet.api.order_details.AmazonS3Delivery.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of AmazonS3Delivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of AmazonS3Delivery. \"\"\" cloud_details = { 'aws_access_key_id' : self . aws_access_key_id , 'aws_secret_access_key' : self . aws_secret_access_key , 'bucket' : self . bucket , 'aws_region' : self . aws_region , } if self . path_prefix : cloud_details [ 'path_prefix' ] = self . path_prefix details = super () . to_dict () details [ self . cloud_key ] = cloud_details return details","title":"to_dict()"},{"location":"api/#planet.api.order_details.AzureBlobStorageDelivery","text":"Azure Blob Storage delivery description for an order detail.","title":"AzureBlobStorageDelivery"},{"location":"api/#planet.api.order_details.AzureBlobStorageDelivery.__init__","text":"Parameters: Name Type Description Default account str Azure account. required container str ABS container name. required sas_token str Shared-Access Signature token. Token should be specified without a leading '?'. required storage_endpoint_suffix str Deliver order to a sovereign cloud. None path_prefix str Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. None archive_type str Archive order files. Only supports 'zip'. False single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , account : str , container : str , sas_token : str , storage_endpoint_suffix : str = None , path_prefix : str = None , archive_type : str = False , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: account: Azure account. container: ABS container name. sas_token: Shared-Access Signature token. Token should be specified without a leading '?'. storage_endpoint_suffix: Deliver order to a sovereign cloud. path_prefix: Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" self . account = account self . container = container self . sas_token = sas_token self . storage_endpoint_suffix = storage_endpoint_suffix self . path_prefix = path_prefix super () . __init__ ( archive_type , single_archive , archive_filename )","title":"__init__()"},{"location":"api/#planet.api.order_details.AzureBlobStorageDelivery.from_dict","text":"Create AzureBlobStorageDelivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description AzureBlobStorageDelivery AzureBlobStorageDelivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> AzureBlobStorageDelivery : \"\"\"Create AzureBlobStorageDelivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: AzureBlobStorageDelivery instance \"\"\" cloud_details = _get_cloud_details ( details , cls . cloud_key ) return cls ( ** cloud_details )","title":"from_dict()"},{"location":"api/#planet.api.order_details.AzureBlobStorageDelivery.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of AzureBlobStorageDelivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of AzureBlobStorageDelivery. \"\"\" cloud_details = { 'account' : self . account , 'container' : self . container , 'sas_token' : self . sas_token , } if self . storage_endpoint_suffix : cloud_details [ 'storage_endpoint_suffix' ] = \\ self . storage_endpoint_suffix if self . path_prefix : cloud_details [ 'path_prefix' ] = self . path_prefix details = super () . to_dict () details [ self . cloud_key ] = cloud_details return details","title":"to_dict()"},{"location":"api/#planet.api.order_details.GoogleCloudStorageDelivery","text":"Google Cloud Storage delivery description for an order detail.","title":"GoogleCloudStorageDelivery"},{"location":"api/#planet.api.order_details.GoogleCloudStorageDelivery.__init__","text":"Parameters: Name Type Description Default bucket str GCS bucket name. required credentials str JSON-string of service account for bucket. required path_prefix str Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. None archive_type str Archive order files. Only supports 'zip'. False single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , bucket : str , credentials : str , path_prefix : str = None , archive_type : str = False , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: bucket: GCS bucket name. credentials: JSON-string of service account for bucket. path_prefix: Custom string to prepend to the files delivered to the bucket. A slash (/) character will be treated as a \"folder\". Any other characters will be added as a prefix to the files. archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" self . bucket = bucket self . credentials = credentials self . path_prefix = path_prefix super () . __init__ ( archive_type , single_archive , archive_filename )","title":"__init__()"},{"location":"api/#planet.api.order_details.GoogleCloudStorageDelivery.from_dict","text":"Create GoogleCloudStorageDelivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description GoogleCloudStorageDelivery GoogleCloudStorageDelivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> GoogleCloudStorageDelivery : \"\"\"Create GoogleCloudStorageDelivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: GoogleCloudStorageDelivery instance \"\"\" cloud_details = _get_cloud_details ( details , cls . cloud_key ) return cls ( ** cloud_details )","title":"from_dict()"},{"location":"api/#planet.api.order_details.GoogleCloudStorageDelivery.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of GoogleCloudStorageDelivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of GoogleCloudStorageDelivery. \"\"\" cloud_details = { 'bucket' : self . bucket , 'credentials' : self . credentials , } if self . path_prefix : cloud_details [ 'path_prefix' ] = self . path_prefix details = super () . to_dict () details [ self . cloud_key ] = cloud_details return details","title":"to_dict()"},{"location":"api/#planet.api.order_details.GoogleEarthEngineDelivery","text":"Google Earth Engine delivery description for an order detail.","title":"GoogleEarthEngineDelivery"},{"location":"api/#planet.api.order_details.GoogleEarthEngineDelivery.__init__","text":"Parameters: Name Type Description Default project str GEE project name. required collection str GEE Image Collection name. required archive_type str Archive order files. Only supports 'zip'. False single_archive bool Archive all bundles together in a single file. False archive_filename str Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". None Source code in planet/api/order_details.py def __init__ ( self , project : str , collection : str , archive_type : str = False , single_archive : bool = False , archive_filename : str = None ): \"\"\" Parameters: project: GEE project name. collection: GEE Image Collection name. archive_type: Archive order files. Only supports 'zip'. single_archive: Archive all bundles together in a single file. archive_filename: Custom naming convention to use to name the archive file that is received. Uses the template variables {{name}} and {{order_id}}. e.g. \"{{name}}_{{order_id}}.zip\". \"\"\" self . project = project self . collection = collection super () . __init__ ( archive_type , single_archive , archive_filename )","title":"__init__()"},{"location":"api/#planet.api.order_details.GoogleEarthEngineDelivery.from_dict","text":"Create GoogleEarthEngineDelivery instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of delivery. required Returns: Type Description GoogleEarthEngineDelivery GoogleEarthEngineDelivery instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> GoogleEarthEngineDelivery : \"\"\"Create GoogleEarthEngineDelivery instance from Orders API spec representation. Parameters: details: API spec representation of delivery. Returns: GoogleEarthEngineDelivery instance \"\"\" cloud_details = _get_cloud_details ( details , cls . cloud_key ) return cls ( ** cloud_details )","title":"from_dict()"},{"location":"api/#planet.api.order_details.GoogleEarthEngineDelivery.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of GoogleEarthEngineDelivery. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of GoogleEarthEngineDelivery. \"\"\" cloud_details = { 'project' : self . project , 'collection' : self . collection , } details = super () . to_dict () details [ self . cloud_key ] = cloud_details return details","title":"to_dict()"},{"location":"api/#planet.api.order_details.Tool","text":"Tool description for an order detail. See Tools and Toolchains for more information on available tools and tool parameters.","title":"Tool"},{"location":"api/#planet.api.order_details.Tool.__init__","text":"Parameters** name: Tool name. parameters: Tool parameters. Source code in planet/api/order_details.py def __init__ ( self , name : str , parameters : dict ): \"\"\" Parameters** name: Tool name. parameters: Tool parameters. \"\"\" self . name = specs . validate_tool ( name ) self . parameters = parameters","title":"__init__()"},{"location":"api/#planet.api.order_details.Tool.from_dict","text":"Create Tool instance from Orders API spec representation. Parameters: Name Type Description Default details dict API spec representation of Tool. required Returns: Type Description Tool Tool instance Source code in planet/api/order_details.py @classmethod def from_dict ( cls , details : dict ) -> Tool : \"\"\"Create Tool instance from Orders API spec representation. Parameters: details: API spec representation of Tool. Returns: Tool instance \"\"\" if len ( details ) != 1 : raise ToolException ( 'Tool description must have only one item, name: parameters' ) name , parameters = details . popitem () return cls ( name , parameters )","title":"from_dict()"},{"location":"api/#planet.api.order_details.Tool.to_dict","text":"Get Orders API spec representation. Returns: Type Description dict API spec representation of Tool. Source code in planet/api/order_details.py def to_dict ( self ) -> dict : \"\"\"Get Orders API spec representation. Returns: API spec representation of Tool. \"\"\" return { self . name : self . parameters }","title":"to_dict()"},{"location":"guide/","text":"User Guide Session Communication with the Planet services is provided with the Session class. The recommended way to use a Session is as a context manager. This will provide for automatic clean up of connections when the context is left. >>> import asyncio >>> import os >>> from planet import Session >>> >>> AUTH = ( os . getenv ( 'PL_API_KEY' ), '' ) >>> >>> async def main (): ... async with Session ( auth = AUTH ) as sess : ... # perform operations here ... pass ... >>> asyncio . run ( main ()) Alternatively, use await Session.aclose() to close a Session explicitly: >>> async def main (): ... sess = Session ( auth = AUTH ) ... # perform operations here ... await sess . aclose () ... >>> asyncio . run ( main ()) Orders Client The Orders Client mostly mirrors the Orders API , with the only difference being the addition of the ability to poll for when an order is completed and to download an entire order. >>> from planet import OrdersClient >>> >>> async def main (): ... async with Session ( auth = AUTH ) as sess : ... client = OrdersClient ( sess ) ... # perform operations here ... >>> asyncio . run ( main ()) Creating an Order When creating an order, the order details must be provided to the API. There are two ways to specify the order details, a JSON blob and an OrderDetails instance. An OrderDetails instance is built up from instances of Product , Tool , Delivery , and Notification alongside other, simple parameters. An example of creating an OrderDetails instance: >>> from planet.api.order_details import OrderDetails , Product >>> >>> image_ids = [ '3949357_1454705_2020-12-01_241c' ] >>> order_detail = OrderDetails ( ... 'test_order' , ... [ Product ( image_ids , 'analytic' , 'psorthotile' )] ... ) ... The same thing, expressed as a JSON blob (pro tip: this can be obtained with order_detail.json ): >>> order_detail = { ... 'name' : 'test_order' , ... 'products' : [{ 'item_ids' : [ '3949357_1454705_2020-12-01_241c' ], ... 'item_type' : 'PSOrthoTile' , ... 'product_bundle' : 'analytic' }], ... } Once the order details are built up, creating an order is done within the context of a Session with the OrdersClient : >>> async def main (): ... async with Session ( auth = AUTH ) as sess : ... cl = OrdersClient ( sess ) ... order_id = await cl . create_order ( order_detail ) ... >>> asyncio . run ( main ())","title":"User Guide"},{"location":"guide/#user-guide","text":"","title":"User Guide"},{"location":"guide/#session","text":"Communication with the Planet services is provided with the Session class. The recommended way to use a Session is as a context manager. This will provide for automatic clean up of connections when the context is left. >>> import asyncio >>> import os >>> from planet import Session >>> >>> AUTH = ( os . getenv ( 'PL_API_KEY' ), '' ) >>> >>> async def main (): ... async with Session ( auth = AUTH ) as sess : ... # perform operations here ... pass ... >>> asyncio . run ( main ()) Alternatively, use await Session.aclose() to close a Session explicitly: >>> async def main (): ... sess = Session ( auth = AUTH ) ... # perform operations here ... await sess . aclose () ... >>> asyncio . run ( main ())","title":"Session"},{"location":"guide/#orders-client","text":"The Orders Client mostly mirrors the Orders API , with the only difference being the addition of the ability to poll for when an order is completed and to download an entire order. >>> from planet import OrdersClient >>> >>> async def main (): ... async with Session ( auth = AUTH ) as sess : ... client = OrdersClient ( sess ) ... # perform operations here ... >>> asyncio . run ( main ())","title":"Orders Client"},{"location":"guide/#creating-an-order","text":"When creating an order, the order details must be provided to the API. There are two ways to specify the order details, a JSON blob and an OrderDetails instance. An OrderDetails instance is built up from instances of Product , Tool , Delivery , and Notification alongside other, simple parameters. An example of creating an OrderDetails instance: >>> from planet.api.order_details import OrderDetails , Product >>> >>> image_ids = [ '3949357_1454705_2020-12-01_241c' ] >>> order_detail = OrderDetails ( ... 'test_order' , ... [ Product ( image_ids , 'analytic' , 'psorthotile' )] ... ) ... The same thing, expressed as a JSON blob (pro tip: this can be obtained with order_detail.json ): >>> order_detail = { ... 'name' : 'test_order' , ... 'products' : [{ 'item_ids' : [ '3949357_1454705_2020-12-01_241c' ], ... 'item_type' : 'PSOrthoTile' , ... 'product_bundle' : 'analytic' }], ... } Once the order details are built up, creating an order is done within the context of a Session with the OrdersClient : >>> async def main (): ... async with Session ( auth = AUTH ) as sess : ... cl = OrdersClient ( sess ) ... order_id = await cl . create_order ( order_detail ) ... >>> asyncio . run ( main ())","title":"Creating an Order"},{"location":"upgrading/","text":"Upgrading The Planet SDK for Python is Version 2 of what was previously referred to as the Planet API client. Version 2 is essentially a complete rewrite and brings with it big changes to the Python library. In Version 1, a single client was created for all APIs, client=api.ClientV1(api_key=API_KEY) . With this client, all commumication was synchronous. Asynchronous bulk support was provided with the downloader module. There was no built-in support for polling when an order was ready to download or tracking when an order was downloaded. In Version 2, a Session is used to manage all communication with the Planet APIs. This provides for multiple asynchronous connections. An API-specific client is created. This client manages polling and downloading, along with any other capabilities provided by the API.","title":"Upgrading"},{"location":"upgrading/#upgrading","text":"The Planet SDK for Python is Version 2 of what was previously referred to as the Planet API client. Version 2 is essentially a complete rewrite and brings with it big changes to the Python library. In Version 1, a single client was created for all APIs, client=api.ClientV1(api_key=API_KEY) . With this client, all commumication was synchronous. Asynchronous bulk support was provided with the downloader module. There was no built-in support for polling when an order was ready to download or tracking when an order was downloaded. In Version 2, a Session is used to manage all communication with the Planet APIs. This provides for multiple asynchronous connections. An API-specific client is created. This client manages polling and downloading, along with any other capabilities provided by the API.","title":"Upgrading"}]}